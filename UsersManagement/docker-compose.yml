
services:
  smartfence_usersmanagement1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smartfence_usersmanagement1
    expose:
      - ${PROD_PORT} 
    env_file:
      - .env
    environment:
      - GO_ENV=development
      - SERVICE_ID=smartfence_usersmanagement1
      - MODE=production
      - PROD_PORT=${PROD_PORT}
      - DEV_PORT=${DEV_PORT}
    networks:
      - smartfence_usersmanagement_network
      - databaseservice_smartfence_database_network

  smartfence_usersmanagement2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smartfence_usersmanagement2
    env_file:
      - .env
    expose:
      - ${PROD_PORT}
    environment:
      - GO_ENV=development
      - SERVICE_ID=smartfence_usersmanagement2
      - MODE=production
      - PROD_PORT=${PROD_PORT}
      - DEV_PORT=${DEV_PORT}
    networks:
      - smartfence_usersmanagement_network
      - databaseservice_smartfence_database_network

  smartfence_nginx_usersmanagement:
    image: nginx:latest
    container_name: smartfence_nginx_usersmanagement
    ports:
      - "${WEBSERVER_PORT}:80"
    env_file:
      - .env
    volumes:
      - ./nginx/app.conf.template:/etc/nginx/conf.d/app.conf.template
      - ./entrypoint.sh:/entrypoint.sh
    entrypoint: ["/bin/sh", "/entrypoint.sh"]
    depends_on:
      - smartfence_usersmanagement1
      - smartfence_usersmanagement2
    networks:
      - smartfence_usersmanagement_network
      - databaseservice_smartfence_database_network

networks:
  smartfence_usersmanagement_network:
    driver: bridge
  
  databaseservice_smartfence_database_network:
    external: true

volumes:
  dbdata:
    driver: local
  local_pgdata:
  pgadmin-data:
